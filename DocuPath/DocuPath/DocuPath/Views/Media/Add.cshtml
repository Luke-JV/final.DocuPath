@model DocuPath.Models.DPViewModels.AddMediaViewModel
@using DocuPath.Models;
@{ ViewBag.Title = "Add"; ViewBag.GenericHAPTICLocator = "AddGeneric"; ViewBag.SpecificHAPTICLocator = "AddMediaSpecific"; ViewBag.PageInfoLocator = "AddMedia"; }

@* BREADCRUMB NAVIGATION: *@
<ol class="breadcrumb">
    <li>@Html.ActionLink("Home", "Index", "Home") </li>
    <li>@Html.ActionLink("Media Repository", "All", "Media") </li>
    <li class="active">@Html.ActionLink("Add Media Items", "Add") </li>
</ol>
@* PAGE HEADER & ACTION BUTTONS: *@
<div class="grid hdr-grid">
    <div class="page-hdr">
        <div class="page-header-subgrid">
            <div class="icon-circle mdl2icon mdl2-media"></div>
            <div class="circular-motif-left"><img src="~/Content/Resources/CircularMotifLeft.png" style="max-height: 45px" /></div>
            <div class="page-header-text">ADD MEDIA ITEMS</div>
        </div>
    </div>
    <div class="page-btns">
        <div class="page-buttons-subgrid buttons-two">
            <div grid-area="left"><img src="~/Content/Resources/CircuitryMotifLeft.png" class="circuitry-left-motif" /></div>
            <div></div>
            <div grid-area="btn1">
                <form class="minimalform" action="~/Media/All" style="margin-top: 2px">
                    @* TODO: Code to clear out folder if cancelled after modal confirmation  *@
                    <button class="btn btn-default btn-generic btn-page-action mdl2icon mdl2-backprevious btn-mdl2icon" onclick="this.blur()" type="submit" data-toggle="tooltip" title="CANCEL ADD MEDIA OPERATION"></button>
                </form>
            </div>
            <div grid-area="btn2">
                <form class="minimalform" action="javascript:void(0)" style="margin-top: 2px">
                    <button id="btnSave" class="btn btn-default btn-generic btn-page-action mdl2icon mdl2-save btn-mdl2icon" data-toggle="tooltip" title="SAVE & EXIT"></button>
                </form>
            </div>
            @*<div grid-area="btn2">
                    <form class="minimalform" action="javascript:void(0)" style="margin-top: 2px">
                        <button id="btnDensityToggle" class="btn btn-default btn-generic btn-page-action mdl2icon mdl2-density btn-mdl2icon" data-toggle="tooltip" title="TOGGLE TABLE DENSITY"></button>
                    </form>
                </div>*@
            <div></div>
            <div class="right-motif" grid-area="right"><img src="~/Content/Resources/CircuitryMotifRight.png" class="circuitry-right-motif" /></div>
        </div>
    </div>
</div>
@* PROVIDE METADATA FOR EACH MEDIA ITEM: *@
@using (Html.BeginForm())
{

    @*for (int i = 0; i < Model.fcList.Count; i++)
    {
        @Html.HiddenFor(m=>m.fcList[i].ForensicCaseID);
    }
    for (int i = 0; i < Model.purposeList.Count; i++)
    {
        @Html.HiddenFor(m => m.purposeList[i].MediaPurposeID);
    }*@
    <input id="btnPOST" class="hidden" type="submit" />
    @Html.AntiForgeryToken()
    //AUTOTAGGER INDEXER & SUBMITTER
    <input type="hidden" id="count" value="@Html.Raw(Model.mediaList.Count)" />
    <input type="hidden" id="btnSubmit" />
    //AUTOTAGGER INDEXER& SUBMITTER

    <div class="form-horizontal border-generic form-generic" @*style="display: none"*@>
    @for (int i = 0; i < Model.mediaList.Count; i++)
    {
        @Html.HiddenFor(m=>m.mediaList[i].MediaID);
        //@Html.HiddenFor(m => m.mediaList[i].MediaPurposeID);
        @Html.HiddenFor(m => m.mediaList[i].StatusID);
        @Html.HiddenFor(m => m.mediaList[i].UserID);
        @Html.HiddenFor(m => m.mediaList[i].MediaLocation);
        //@Html.HiddenFor(m => m.mediaList[i].IsPubliclyAccessible);//*
        //@Html.HiddenFor(m => m.mediaList[i].ForensicCaseID);//*
        //@Html.HiddenFor(m => m.mediaList[i].DateAdded);
        
            <div class="row" style="margin-left: 0px">
                <div class="col-md-3" style="padding: 0px">
                    <div class="panel panel-default" style="margin-bottom: 0px">
                        <div class="panel-heading">
                            <span class="mdl2icon mdl2-upload panel-mdl2icon"></span>
                            <span>PREVIEW</span>
                        </div>
                        <div class="panel-body apad5 text-center" style="height: 221.2px; max-height: 221.2px; width: auto">
                            <div class="imgPreview" style="height: 210px; width: 270px; padding: 0px; display: grid; justify-content: center; margin: auto">
                                @if (VERTEBRAE.Thumbnail_AcceptedFileTypes().Contains(Path.GetExtension(Model.mediaList[i].MediaLocation).ToUpper()))
	                            {
                                    <img class="img-thumbnail" src="~/@VERTEBRAE.GetThumbUrl(Model.mediaList[i].MediaLocation)" style="margin: auto; max-width: 100%; max-height: 100%; object-fit: cover">
                                }
                                else
                                {
                                    // TODO: Brain ReturnForeignThumb() and provide relevant assets:
                                    //VERTEBRAE.ReturnForeignThumb(Path.GetExtension(Model.mediaList[i].MediaLocation));
                                    <img class="img-thumbnail" src="~/Content/Resources/NoPreviewMiscMedia.png" style="margin: auto; max-width: 100%; max-height: 100%; object-fit: contain">
                                }
                            </div>
                                @*<div class="col-md-12">
                                    <form>
                                        <button class="btn btn-default btn-modal-generic" type="submit" style="width: 100px; margin-top: 5px"><i class="mdl2icon mdl2-change"></i> Change</button>
                                        <button class="btn btn-default btn-modal-generic" type="submit" style="width: 100px; margin-top: 5px"><i class="mdl2icon mdl2-cancel"></i> Clear</button>
                                    </form>
                                </div>*@
                            @*<div class="row">
                                    <div class="col-md-12">
                                        <!-- image-preview-filename input [CUT FROM HERE]-->
                                        <div class="input-group image-preview">
                                            <input type="text" class="form-control image-preview-filename" disabled="disabled"> <!-- don't give a name === doesn't send on POST/GET -->
                                            <div class="input-group-btn">
                                                <!-- image-preview-clear button -->
                                                <button type="button" class="btn btn-default image-preview-clear" style="display:none;">
                                                    <span class="mdl2icon mdl2-cancel"></span> Clear
                                                </button>
                                                <!-- image-preview-input -->
                                                <div class="btn btn-default btn-generic btn-sm image-preview-input">
                                                    <span class="mdl2icon mdl2-browse"></span>
                                                    <span class="image-preview-input-title">Browse</span>
                                                    <input style="height: 25px" type="file" accept="image/png, image/jpeg, image/gif" name="input-file-preview" /> <!-- rename it -->
                                                </div>
                                            </div>
                                        </div><!-- /input-group image-preview [TO HERE]-->
                                    </div>
                                </div>*@
                        </div>
                    </div>
                </div>
                <div class="col-md-9" style="padding-left: 5px; padding-right: 15px">
                    <div class="panel panel-default" style="margin-bottom: 0px">
                        <div class="panel-heading">
                            <div class="row">
                                <div class="col-md-4">
                                    <span class="mdl2icon mdl2-info panel-mdl2icon"></span>
                                    <span>MEDIA ITEM DETAILS</span>
                                </div>
                                
                                <div class="col-md-8">
                                    <div class="col-md-11 text-right" style="padding-right: 0px"><p class="media-filename">@Path.GetFileName(Model.mediaList[i].MediaLocation)</p></div>
                                    <div class="col-md-1 text-center" style="padding: 0px"><span class="mdl2icon mdl2-namesurname panel-mdl2icon"></span></div>
                                </div>
                            </div>
                        </div>
                        <div class="panel-body" @*style="min-height: 169.2px; max-height: 169.2px;"*@>
                            @*@Html.ValidationSummary(true, "", new { @class = "validation-text text-danger" })
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MediaID, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MediaID, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.MediaID, "", new { @class = "validation-text text-danger" })
                                    </div>
                                </div>*@

                            @*<div class="form-group">
                                    @Html.LabelFor(model => model.UserID, "UserID", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("UserID", null, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "validation-text text-danger" })
                                    </div>
                                </div>*@

                            @*<div class="form-group">
                                    @Html.LabelFor(model => model.DateAdded, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.DateAdded, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.DateAdded, "", new { @class = "validation-text text-danger" })
                                    </div>
                                </div>*@

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.mediaList[i].MediaCaption, htmlAttributes: new { @class = "control-label col-md-3 label-nopad" })
                                        <div class="col-md-9 col-nopad">
                                            @Html.EditorFor(model => model.mediaList[i].MediaCaption, new { htmlAttributes = new { @class = "form-control", @style = "width: 100%" } })
                                            @Html.ValidationMessageFor(model => model.mediaList[i].MediaCaption, "", new { @class = "validation-text text-danger" })
                                        </div>
                                    </div>

                                   
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.mediaList[i].IsPubliclyAccessible, htmlAttributes: new { @class = "control-label col-md-3 label-nopad" })
                                        <div class="col-md-9 col-nopad">
                                            <div class="checkbox" style="padding-left: 0px; padding-bottom: 5px">
                                                @Html.CheckBoxFor(model => model.mediaList[i].IsPubliclyAccessible, new { id = "tglWarning" + i, type = "checkbox", data_toggle = "toggle", data_on = "Public", data_off = "Private", data_onstyle = "danger", data_offstyle = "success", data_size = "mini", data_style = "ios", data_width = "70", onchange = "toggleWarning()" })

                                                @*<input id="tglWarning1" type="checkbox" data-toggle="toggle" data-on="Public" data-off="Private" data-onstyle="danger" data-offstyle="success" data-size="mini" data-style="ios" data-width="70" onchange="toggleWarning()">*@
                                                <label id="lblWarning-@i" class="media-warning-label">warning - visible to public!</label>
                                            </div>
                                        </div>
                                        
                                    </div>
                                        
                                    <div id="frmPurpose_@i" class="form-group">
                                        @Html.LabelFor(model => model.mediaList[i].MediaPurposeID, "Purpose", htmlAttributes: new { @class = "control-label col-md-3 label-nopad" })
                                        <div class="col-md-9 col-nopad">                                           
                                            @Html.DropDownListFor(model => model.mediaList[i].MediaPurposeID, new SelectList(Model.purposeList, "MediaPurposeID", "MediaPurposeValue", Model.purposeList.Where(x => x.MediaPurposeID == Model.mediaList[i].MediaPurposeID)), htmlAttributes: new { @id = "ddlPurpose_"+i, @class = "form-control", @style = "width: 100%" })
                                            @Html.ValidationMessageFor(model => model.mediaList[i].MediaPurposeID, "", new { @class = "validation-text text-danger" })
                                            @if (Model.fcList.Count < 1)
                                            {
                                                @Html.Label("Error","NO RECENT FORENSIC CASES FOUND.", new { @class = "hint-label",@style="margin-top:5px;"})                                                
                                            }
                                        </div>
                                       
                                    </div>

                                    <div id="frmCaseLink_@i" class="form-group" style="margin-top: 7px">
                                        @Html.Label("Linked To", htmlAttributes: new { @class = "control-label col-md-3 label-nopad" })
                                        <div class="col-md-9 col-nopad">
                                            @* FETCH 404, make list of FC from last 7 days (look at VISION metrics in VERTEBRAE) *@
                                            @if (Model.fcList.Count > 0)
                                            {
                                                @Html.DropDownListFor(model => model.mediaList[i].ForensicCaseID, new SelectList(Model.fcList, "ForensicCaseID", "ForensicDRNumber", Model.fcList.Where(x => x.ForensicCaseID == Model.mediaList[i].ForensicCaseID)), htmlAttributes: new { @id = "ddlFC_" + i, @class = "form-control", @style = "width: 100%" })
                                            }                                            
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group" style="margin-bottom: 0px">
                                        @Html.LabelFor(model => model.mediaList[i].MediaDescription, htmlAttributes: new { @class = "control-label col-md-2 label-nopad" })
                                        <div class="col-md-10 col-nopad">
                                            @Html.EditorFor(model => model.mediaList[i].MediaDescription, new { htmlAttributes = new { @class = "form-control", @style = "width: 100%; height: 159.2px" } })
                                            @Html.ValidationMessageFor(model => model.mediaList[i].MediaDescription, "", new { @class = "validation-text text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row" style="margin-left: 0px;">
                                <div class="col-md-12" style="padding-left: 0px; padding-right: 15px">
                                    <div class="form-group">
                                        @Html.Label("Media Item Tags", htmlAttributes: new { @class = "control-label col-md-12", @style = "text-align: left; padding-top: 0px" })
                                        <div class="col-md-12">
                                            @* AUTOTAGGER *@
                                            <input type="hidden" id="key-@Html.Raw(i)" value="@Html.Raw(Model.mediaList[i].MediaID)" />
                                            <input type="text" id="tag-@Html.Raw(i)" />
                                            <input type="hidden" id="hfTag-@Html.Raw(i)" />
                                            @* AUTOTAGGER *@
                                        </div>
                                    </div>
                                </div>
                            </div>


                            @*<div class="form-group">
                                    @Html.LabelFor(model => model.MediaLocation, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.MediaLocation, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.MediaLocation, "", new { @class = "validation-text text-danger" })
                                    </div>
                                </div>*@

                            @*<div class="form-group">
                                    @Html.LabelFor(model => model.StatusID, "StatusID", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("StatusID", null, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.StatusID, "", new { @class = "validation-text text-danger" })
                                    </div>
                                </div>*@
                        </div>
                    </div>
                </div>
            </div>
            <hr class="dp-separator-hr" @*style="display: none"*@ />
    }
    </div>

    @*<div class="form-horizontal">
        <h4>MEDIA</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "validation-text text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.MediaID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MediaID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MediaID, "", new { @class = "validation-text text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StatusID, "StatusID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("StatusID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.StatusID, "", new { @class = "validation-text text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ForensicCaseID, "ForensicCaseID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ForensicCaseID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ForensicCaseID, "", new { @class = "validation-text text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MediaPurposeID, "MediaPurposeID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("MediaPurposeID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MediaPurposeID, "", new { @class = "validation-text text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserID, "UserID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("UserID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "validation-text text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateAdded, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateAdded, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateAdded, "", new { @class = "validation-text text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MediaCaption, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MediaCaption, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MediaCaption, "", new { @class = "validation-text text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MediaDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MediaDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MediaDescription, "", new { @class = "validation-text text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsPubliclyAccessible, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsPubliclyAccessible)
                    @Html.ValidationMessageFor(model => model.IsPubliclyAccessible, "", new { @class = "validation-text text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MediaLocation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MediaLocation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MediaLocation, "", new { @class = "validation-text text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>*@
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/toggle")
    <script>
        $('#btnSave').click(function () {
            var btnPost = document.getElementById('btnPOST');
            var btnSubmit = document.getElementById('btnSubmit');
            btnPost.click();
            btnSubmit.click();
        });

    </script>
    <script>
        var count = document.getElementById("count").value;

                $(document).ready(function toggleFCLink() {
                    for (var i = 0; i < count; i++) {
                        $("#frmCaseLink_" + i).hide();                        
                        $("#ddlPurpose_" + i + " option:selected").attr("selected", null);
                        $("#ddlPurpose_" + i + " option[value=2]").attr("selected", "selected");
                        $("#lblWarning-" + i).hide();                        
                    }
                })

    </script>
    <script type="text/javascript">
                $(function toggleWarning() {
                    $('input[type=checkbox]').change(function () {
                        for (var i = 0; i < count; i++) {
                            if ($('#tglWarning'+i).prop("checked") == true) { $('#lblWarning-'+i).show('slow') } else { $('#lblWarning-'+i).hide() };
                        }                        
                    });
                })
    </script>
    <script type="text/javascript">

                //var i = 0;
                //for (var i = 0; i < count; i++) {
                //    $("#ddlPurpose_"+i).on("change",{id:i}, function (e) {
                //        if (e.data.id == 0) {
                //            alert("foo")
                //        }
                //    })
                //}
                //for (var i = 1; i <= count; i++) {
                //    var selector = "#ddlPurpose_" + i;
                //    $(selector).on("change", { id: i }, (function (e) {

                //        alert(e.data.id)
                //    }))
                //}
                for (var i = 0; i <= count; i++) {
                    var selector = "#ddlPurpose_" + i;
                    $(selector).on('change', { option: "#ddlPurpose_" + i + " option:selected", target: "#frmCaseLink_" + i  }, function (e) {
                        //alert(e.data.id);
                        if ($(e.data.option).text() == "Case Related")
                        {
                            //alert($(e.data.option).op)
                            $(e.data.target).show();
                        }
                        else $(e.data.target).hide();
                    });
                }
                

                //    $("#ddlPurpose_" + i).change(function () {
                //        if ($("#ddlPurpose_" + i).find(":selected").val() == "1") {
                //            $("#frmCaseLink_" + i).show("slow")
                //        } else {
                //            $("#frmCaseLink_" + i).hide("slow")
                //        }
                //    })

    </script>

    @* LUKE AUTOTAGSINPUT JS HERE *@

    @Styles.Render("~/tags/css")
    @Scripts.Render("~/bundles/tags")
    <script>
        //OFFICIAL
                var count = document.getElementById("count").value;
                var selected = false;
                for (var y = 0; y < count; y++) {

                    $('#tag-' + y).tagEditor({
                        autocomplete: {
                            autoFocus: true,
                            source: function (request, response) {
                                $.ajax({
                                    url: '/Media/AutoTag/',
                                    data: "{ 'prefix': '" + request.term.replace(/'|\\/gi, '') + "'}",
                                    dataType: "json",
                                    type: "POST",
                                    contentType: "application/json; charset=utf-8",
                                    success: function (data) {
                                        response($.map(data, function (item) {
                                            return item;
                                        }))                                        
                                    },
                                    error: function (response) {
                                        alert(response.responseText);
                                    },
                                    failure: function (response) {
                                        alert(response.responseText);
                                    }
                                });
                            },
                            select: function (e, i) {
                                $('#hfTag-' + y).val(i.item.val);
                                selected = true;
                            },
                            minLength: 1
                        },
                        beforeTagSave: function (field, editor, tags, tag, val) {
                            if (!selected) {
                                return false;
                            }
                            selected = false;
                        },
                        delimiter: "~",
                        forceLowercase: false,
                        placeholder: 'Start Tagging...'

                    });
                }
                //$('#btnSave').click(function () {
                //    document.getElementById("btnPOST").click();

                //});
                $("#btnSubmit").click(function (request) {

                    var all = "";
                    for (var z = 0; z < count; z++) {
                        var mID = document.getElementById("key-"+z).value;
                        var field = $('#tag-' + z).tagEditor('getTags')[0].field;
                        all += mID + ":" + field.value + "|";
                    }
                    all = all.replace(/'/gi, '`')
                    $.ajax({
                        url: '/Media/catchTags/',
                        data: "{ 'tags': '" + all + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                })
        //OFFICIAL

        //DEBUG
                //var count = document.getElementById("count").value;
                //var selected = false;


                //    $('#tag-1').tagEditor({
                //        autocomplete: {
                //            autoFocus: true,
                //            source: function (request, response) {
                //                $.ajax({
                //                    url: '/Media/AutoTag/',
                //                    data: "{ 'prefix': '" + request.term.replace(/'|\\/gi, '') + "'}",
                //                    dataType: "json",
                //                    type: "POST",
                //                    contentType: "application/json; charset=utf-8",
                //                    success: function (data) {
                //                        response($.map(data, function (item) {
                //                            return item;
                //                        }))
                //                    },
                //                    error: function (response) {
                //                        alert(response.responseText);
                //                    },
                //                    failure: function (response) {
                //                        alert(response.responseText);
                //                    }
                //                });
                //            },
                //            select: function (e, i) {
                //                $('#hfTag-1').val(i.item.val);
                //                selected = true;
                //            },
                //            minLength: 1
                //        },
                //        beforeTagSave: function (field, editor, tags, tag, val) {
                //            if (!selected) {
                //                return false;
                //            }
                //            selected = false;
                //        },
                //        delimiter: "~",
                //        forceLowercase: false,
                //        placeholder: 'Start Tagging...'

                //    });
                
                //$("#btnSubmit").click(function (request) {

                //    var all = "";
                //    for (var z = 0; z < count; z++) {
                //        var field = $('#tag-' + z).tagEditor('getTags')[0].field;
                //        all += "item" + z + ":" + field.value + "|";
                //    }
                //    all = all.replace(/'/gi, '`')
                //    $.ajax({
                //        url: '/Home/catchTags/',
                //        data: "{ 'tags': '" + all + "'}",
                //        dataType: "json",
                //        type: "POST",
                //        contentType: "application/json; charset=utf-8",
                //        success: function (data) {
                //            response($.map(data, function (item) {
                //                return item;
                //            }))
                //        },
                //        error: function (response) {
                //            alert(response.responseText);
                //        },
                //        failure: function (response) {
                //            alert(response.responseText);
                //        }
                //    });
                //})
        //DEBUG
    </script>
<script>
                $("button").click(function () {
                    this.blur();
                });
</script>
}

