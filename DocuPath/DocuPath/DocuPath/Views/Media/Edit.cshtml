@model DocuPath.Models.DPViewModels.MediaViewModel
@using DocuPath.Models
@{ ViewBag.Title = "Maintain Tags"; ViewBag.GenericHAPTICLocator = "UpdateGeneric"; ViewBag.SpecificHAPTICLocator = "UpdateMediaSpecific"; ViewBag.PageInfoLocator = "UpdateMedia"; }

@* BREADCRUMB NAVIGATION: *@
<ol class="breadcrumb">
    <li>@Html.ActionLink("Home", "Index", "Home") </li>
    <li>@Html.ActionLink("Media Repository", "All", "Media") </li>
    <li class="active">@Html.ActionLink("Maintain Item Tags", "Edit") </li>
</ol>
@* PAGE HEADER & ACTION BUTTONS: *@
<div class="grid hdr-grid">
    <div class="page-hdr">
        <div class="page-header-subgrid">
            <div class="icon-circle mdl2icon mdl2-media"></div>
            <div class="circular-motif-left"><img src="~/Content/Resources/CircularMotifLeft.png" style="max-height: 45px" /></div>
            <div class="page-header-text">MAINTAIN MEDIA ITEM TAGS</div>
        </div>
    </div>
    <div class="page-btns">
        <div class="page-buttons-subgrid buttons-four">
            <div grid-area="left"><img src="~/Content/Resources/CircuitryMotifLeft.png" class="circuitry-left-motif" /></div>
            <div></div>
            <div grid-area="btn1">
                <form class="minimalform" action="~/Media/All" style="margin-top: 2px">
                    @* TODO: Code to clear out folder if cancelled after modal confirmation  *@
                    <button class="btn btn-default btn-generic btn-page-action mdl2icon mdl2-backprevious btn-mdl2icon" onclick="this.blur()" type="submit" data-toggle="tooltip" title="BACK TO LIST"></button>
                </form>
            </div>
            <div grid-area="btn2">
                <form class="minimalform" action="javascript:void(0)" style="margin-top: 2px">
                    <button id="btnSave" class="btn btn-default btn-generic btn-page-action mdl2icon mdl2-save btn-mdl2icon" data-toggle="tooltip" title="SAVE & EXIT"></button>
                </form>
            </div>
            <div grid-area="btn3">
                <img src="~/Content/Resources/SlantedDivider.png" style="height: 45px; margin-top: 3px" />
            </div>
            <div grid-area="btn4">
                <form class="minimalform" action="javascript:void(0)" style="margin-top: 2px">
                    <button id="btnHapticToggle" class="btn btn-default btn-generic btn-page-action mdl2icon mdl2-help btn-mdl2icon" onclick="this.blur()" data-toggle="tooltip" title="HELP"></button>
                </form>
            </div>
            <div></div>
            <div class="right-motif" grid-area="right"><img src="~/Content/Resources/CircuitryMotifRight.png" class="circuitry-right-motif" /></div>
        </div>
    </div>
</div>

@using (Html.BeginForm())
{    
    @Html.AntiForgeryToken()
    <input id="btnPOST" class="hidden" type="submit" />
    <div class="form-horizontal border-generic form-generic">
        <div class="row" style="margin-left: 0px">
            <div class="col-md-12" style="padding: 0px">
                <div class="panel panel-default" style="margin-bottom: 0px; margin-right: 15px">
                    <div class="panel-heading">
                        <span class="mdl2icon mdl2-view panel-mdl2icon"></span>
                        <span>Media Item Preview</span>
                    </div>
                    <div class="panel-body apad5 text-center" style="height: 470px !important; max-height: 470px !important; width: auto">
                        <div class="imgPreview" style="height: 460px !important; width: 700px; padding: 0px; display: grid; justify-content: center; margin: auto">
                            <img class="img-thumbnail" src="~/@VERTEBRAE.GetUrl(Model.media.MediaLocation)" style="margin: auto; max-width: 100%; max-height: 100%; object-fit: cover">
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-12" style="padding-left: 0px; padding-right: 15px; padding-top: 5px">
                <div class="panel panel-default" style="margin-bottom: 0px">
                    <div class="panel-heading">
                        <div class="row">
                            <div class="col-md-3">
                                <span class="mdl2icon mdl2-tag panel-mdl2icon"></span>
                                <span>Media Item Tags</span>
                            </div>
                            <div class="col-md-9">
                                <div class="col-md-11 text-right" style="padding-right: 0px"><p class="media-filename">@Path.GetFileName(Model.media.MediaLocation)</p></div>
                                <div class="col-md-1 text-center" style="padding: 0px"><span class="mdl2icon mdl2-miscmedia panel-mdl2icon"></span></div>
                            </div>
                        </div>
                    </div>

                    <div class="panel-body" @*style="min-height: 169.2px; max-height: 169.2px;"*@>
                        <div class="row" style="margin-left: 0px;">
                            <div class="col-md-12" style="padding-left: 0px; padding-right: 15px">
                                <div class="form-group">
                                    @Html.Label("Media Item Tags", htmlAttributes: new { @class = "control-label col-md-12", @style = "text-align: left; padding-top: 0px" })
                                    <div class="col-md-12">
                                        @* <------------------------ LUKE PLEASE FIX HERE, NOT SURE HOW YOU DID IT FOR ADD! -----------------------------> *@
                                        @* AUTOTAGGER *@
                                        <input type="hidden" id="key-1" value="@Html.Raw(Model.media.MediaID)" />
                                        <input type="text" id="tag-1" />
                                        <input type="hidden" id="hfTag-1" />
                                        @* AUTOTAGGER *@
                                        @*<input type="text" data-role="tagsinput" style="width: 100%" value="biliary,atresia,abc,def,ghi,jkl,mno,pqr" />*@
                                        @* <------------------------ UP TO HERE, REMEMBER TO INCLUDE ALL POSTING TEXT ETC -----------------------------> *@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

@section Scripts{
@* LUKE AUTOTAGSINPUT JS HERE *@

@Styles.Render("~/tags/css")
@Scripts.Render("~/bundles/tags")
<script>
    $("button").click(function () {
        this.blur();
    });
    </script>
<script>
    //OFFICIAL
    var count = 2;
    var selected = false;
    
    for (var y = 1; y < count; y++) {

        $('#tag-' + y).tagEditor({
            autocomplete: {
                autoFocus: true,
                source: function (request, response) {
                    $.ajax({
                        url: '/Media/AutoTag/',
                        data: "{ 'prefix': '" + request.term.replace(/'|\\/gi, '') + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $('#hfTag-' + y).val(i.item.val);
                    selected = true;
                },
                minLength: 1
            },
            beforeTagSave: function (field, editor, tags, tag, val) {
                if (!selected) {
                    return false;
                }
                selected = false;
            },
            delimiter: "~",
            forceLowercase: false,
            placeholder: 'Start Tagging...'

        });
    }
    $('#btnSave').click(function () {
        document.getElementById("btnPOST").click();

    });
    $("#btnSubmit").click(function (request) {

        var all = "";
        
            var mID = document.getElementById("key-1").value;
            var field = $('#tag-1').tagEditor('getTags')[0].field;
            all += mID + ":" + field.value + "|";
        
        all = all.replace(/'/gi, '`')
        $.ajax({
            url: '/Media/catchTags/',
            data: "{ 'tags': '" + all + "'}",
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                response($.map(data, function (item) {
                    return item;
                }))
            },
            error: function (response) {
                //alert(response.responseText);
            },
            failure: function (response) {
                //alert(response.responseText);
            }
        });
    })
        //OFFICIAL

        //DEBUG
                //var count = document.getElementById("count").value;
                //var selected = false;


                //    $('#tag-1').tagEditor({
                //        autocomplete: {
                //            autoFocus: true,
                //            source: function (request, response) {
                //                $.ajax({
                //                    url: '/Media/AutoTag/',
                //                    data: "{ 'prefix': '" + request.term.replace(/'|\\/gi, '') + "'}",
                //                    dataType: "json",
                //                    type: "POST",
                //                    contentType: "application/json; charset=utf-8",
                //                    success: function (data) {
                //                        response($.map(data, function (item) {
                //                            return item;
                //                        }))
                //                    },
                //                    error: function (response) {
                //                        alert(response.responseText);
                //                    },
                //                    failure: function (response) {
                //                        alert(response.responseText);
                //                    }
                //                });
                //            },
                //            select: function (e, i) {
                //                $('#hfTag-1').val(i.item.val);
                //                selected = true;
                //            },
                //            minLength: 1
                //        },
                //        beforeTagSave: function (field, editor, tags, tag, val) {
                //            if (!selected) {
                //                return false;
                //            }
                //            selected = false;
                //        },
                //        delimiter: "~",
                //        forceLowercase: false,
                //        placeholder: 'Start Tagging...'

                //    });

                //$("#btnSubmit").click(function (request) {

                //    var all = "";
                //    for (var z = 0; z < count; z++) {
                //        var field = $('#tag-' + z).tagEditor('getTags')[0].field;
                //        all += "item" + z + ":" + field.value + "|";
                //    }
                //    all = all.replace(/'/gi, '`')
                //    $.ajax({
                //        url: '/Home/catchTags/',
                //        data: "{ 'tags': '" + all + "'}",
                //        dataType: "json",
                //        type: "POST",
                //        contentType: "application/json; charset=utf-8",
                //        success: function (data) {
                //            response($.map(data, function (item) {
                //                return item;
                //            }))
                //        },
                //        error: function (response) {
                //            alert(response.responseText);
                //        },
                //        failure: function (response) {
                //            alert(response.responseText);
                //        }
                //    });
                //})
        //DEBUG
</script>

}