@model DocuPath.Models.DPViewModels.CaseMediaViewModel
@using DocuPath.Models;
@{ ViewBag.Title = "Add"; ViewBag.GenericHAPTICLocator = "AddGeneric"; ViewBag.SpecificHAPTICLocator = "AddFCSpecific"; ViewBag.PageInfoLocator = "AddFC"; }

@* BREADCRUMB NAVIGATION: *@
<ol class="breadcrumb">
    <li>@Html.ActionLink("Home", "Index", "Home") </li>
    <li>@Html.ActionLink("Forensic Cases", "All", "ForensicCase") </li>
    <li class="active">@Html.ActionLink("Add Forensic Case (Media Items)", "CaptureMediaItemDetails") </li>
</ol>
@* PAGE HEADER & ACTION BUTTONS: *@
<div class="grid hdr-grid">
    <div class="page-hdr">
        <div class="page-header-subgrid">
            <div class="icon-circle mdl2icon mdl2-fc"></div>
            <div class="circular-motif-left"><img src="~/Content/Resources/CircularMotifLeft.png" style="max-height: 45px" /></div>
            <div class="page-header-text">ADD FORENSIC CASE <span style="color: #666">– </span><span style="color: #ae1f1f">MEDIA ITEMS</span></div>
        </div>
    </div>
    <div class="page-btns">
        <div class="page-buttons-subgrid buttons-three">
            <div grid-area="left"><img src="~/Content/Resources/CircuitryMotifLeft.png" class="circuitry-left-motif" /></div>
            <div></div>
            <div grid-area="btn1">
                <form class="minimalform" action="@Url.Action("CaptureMediaItemDetails","ForensicCase")" method="post" style="margin-top: 2px">
                    <button id="btnNext" class="btn btn-default btn-generic btn-page-action mdl2icon mdl2-forwardnext btn-mdl2icon" type="submit" data-toggle="tooltip" title="NEXT SECTION"></button>
                </form>
            </div>
            <div grid-area="btn2">
                <img src="~/Content/Resources/SlantedDivider.png" style="height: 45px; margin-top: 3px" />
            </div>
            <div grid-area="btn3">
                <form class="minimalform" action="javascript:void(0)" style="margin-top: 2px">
                    <button id="btnHapticToggle" class="btn btn-default btn-generic btn-page-action mdl2icon mdl2-help btn-mdl2icon" onclick="this.blur()" data-toggle="tooltip" title="HELP"></button>
                </form>
            </div>
            <div></div>
            <div class="right-motif" grid-area="right"><img src="~/Content/Resources/CircuitryMotifRight.png" class="circuitry-right-motif" /></div>
        </div>
    </div>
</div>
@* MODAL NOTIFICATIONS: *@
<div id="divCancelWarning" class="modal-background hidden">
    <div class="modalbox">
        @* TITLE *@
        <div class="modalbox-title-warning"><img class="modalbox-title-mdl2icon" src="~/Content/Resources/icoWarn.png" />WARNING</div>
        @* MESSAGE *@
        <div class="modalbox-message-text">
            Are you sure you want to leave this page? Any unsaved changes will be lost.
        </div>
        @* HELP/INFO *@
        <div class="panel-group" id="warninghelpaccordion">
            <div class="modal-help-panel">
                <div class="panel-heading modalbox-help-panel-heading" data-toggle="collapse" data-target="#warninghelpbody" data-parent="#warninghelpaccordion">More Information</div>
                <div id="warninghelpbody" class="panel-collapse collapse modalbox-help-panel-text">
                    <p style="margin-bottom: 0px; font-weight: bold">Code: W001</p>
                    <hr class="modal-help-hr-warning" />
                    <ul class="haptic-ul">
                        <li>This page allows the user to manipulate information.</li>
                        <li>If any data has been added/changed/amended, navigating away from this page will result in a loss of modified data.</li>
                        <li class="colour-dpred">Please make sure that navigation away from this page is the desired action.</li>
                        <li>To prevent data loss and remain on the current page, click the <kbd>No</kbd> button.</li>
                        <li>To cancel changes and return to the previous page, click the <kbd>Yes</kbd> button.</li>
                    </ul>
                </div>
            </div>
        </div>
        @* BUTTONS *@
        <div class="modalbox-button-bar">
            <div class="col-md-3 modal-btn-col"></div><div class="col-md-3 modal-btn-col"></div>
            <div class="col-md-3 modal-btn-col"></div>
            <div class="col-md-3 modal-btn-col">
                <input type="button" id="btnCancelYes" value="Yes" class="btn btn-modal-generic" onclick="window.location.href(@Url.Action("All","ForensicCase"))" />
                <input type="button" id="btnCancelNo" value="No" class="btn btn-modal-generic" />
            </div>
        </div>
    </div>
</div>

@* PAGE CONTENT: *@
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "validation-text text-danger" })

    <div class="form-horizontal border-generic form-generic">
        <ul class="nav nav-tabs nav-justified" data-toggle="tooltip" title="CASE BUILDER FLOW" data-placement="left">
            <li><a class="dynamic-tab-heading link-disabled" href="javascript:void(0)">Core Data</a></li>
            <li><a class="dynamic-tab-heading link-disabled" href="javascript:void(0)" style="margin-left: 5px">Observations</a></li>
            <li><a class="dynamic-tab-heading link-disabled" href="javascript:void(0)" style="margin-left: 5px">Service Requests</a></li>
            <li class="active"><a class="dynamic-tab-heading" href="javascript:void(0)" style="margin-left: 5px">Media Items</a></li>
            <li><a class="dynamic-tab-heading" href="@Url.Action("AddAdditionalEvidence","ForensicCase")" style="margin-left: 5px">Additional Evidence</a></li>
            <li><a class="dynamic-tab-heading link-disabled" href="javascript:void(0)" style="margin-left: 5px">Cause of Death</a></li>
            <li><a class="dynamic-tab-heading link-disabled" href="javascript:void(0)" style="margin-left: 5px">Statistics</a></li>
        </ul>

        <input id="btnPOST" class="hidden" type="submit" />
        @Html.AntiForgeryToken()
        @*AUTOTAGGER INDEXER & SUBMITTER*@
        <input type="hidden" id="count" value="@Html.Raw(Model.mediaList.Count)" />
        <input type="hidden" id="btnSubmit" />
        @*AUTOTAGGER INDEXER& SUBMITTER*@
        <div class="form-horizontal border-generic form-generic" @*style="display: none"*@>
            @for (int i = 0; i < Model.mediaList.Count; i++)
            {
                @Html.HiddenFor(m => m.mediaList[i].MediaID);
                //@Html.HiddenFor(m => m.mediaList[i].MediaPurposeID);
                @Html.HiddenFor(m => m.mediaList[i].StatusID);
                @Html.HiddenFor(m => m.mediaList[i].UserID);
                @Html.HiddenFor(m => m.mediaList[i].MediaLocation);
                //@Html.HiddenFor(m => m.mediaList[i].IsPubliclyAccessible);//*
                //@Html.HiddenFor(m => m.mediaList[i].ForensicCaseID);//*
                //@Html.HiddenFor(m => m.mediaList[i].DateAdded);

                <div class="row" style="margin-left: 0px">
                    <div class="col-md-3" style="padding: 0px">
                        <div class="panel panel-default" style="margin-bottom: 0px">
                            <div class="panel-heading">
                                <span class="mdl2icon mdl2-upload panel-mdl2icon"></span>
                                <span>PREVIEW</span>
                            </div>
                            <div class="panel-body apad5 text-center" style="height: 221.2px; max-height: 221.2px; width: auto">
                                <div class="imgPreview" style="height: 210px; width: 270px; padding: 0px; display: grid; justify-content: center; margin: auto">
                                    @if (VERTEBRAE.Thumbnail_AcceptedFileTypes().Contains(Path.GetExtension(Model.mediaList[i].MediaLocation).ToUpper()))
                                    {
                                        <img class="img-thumbnail" src="~/@VERTEBRAE.GetThumbUrl(Model.mediaList[i].MediaLocation)" style="margin: auto; max-width: 100%; max-height: 100%; object-fit: cover">
                                    }
                                    else
                                    {
                                        // TODO: Brain ReturnForeignThumb() and provide relevant assets:
                                        //VERTEBRAE.ReturnForeignThumb(Path.GetExtension(Model.mediaList[i].MediaLocation));
                                        <img class="img-thumbnail" src="~/Content/Resources/NoPreviewMiscMedia.png" style="margin: auto; max-width: 100%; max-height: 100%; object-fit: contain">
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-9" style="padding-left: 5px; padding-right: 15px">
                        <div class="panel panel-default" style="margin-bottom: 0px">
                            <div class="panel-heading">
                                <div class="row">
                                    <div class="col-md-4">
                                        <span class="mdl2icon mdl2-info panel-mdl2icon"></span>
                                        <span>MEDIA ITEM DETAILS</span>
                                    </div>

                                    <div class="col-md-8">
                                        <div class="col-md-11 text-right" style="padding-right: 0px"><p class="media-filename">@Path.GetFileName(Model.mediaList[i].MediaLocation)</p></div>
                                        <div class="col-md-1 text-center" style="padding: 0px"><span class="mdl2icon mdl2-namesurname panel-mdl2icon"></span></div>
                                    </div>
                                </div>
                            </div>
                            <div class="panel-body" @*style="min-height: 169.2px; max-height: 169.2px;"*@>                                
                                <div class="row">
                                   <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.mediaList[i].MediaCaption, htmlAttributes: new { @class = "control-label col-md-3 label-nopad" })
                                            <div class="col-md-9 col-nopad">
                                                @Html.EditorFor(model => model.mediaList[i].MediaCaption, new { htmlAttributes = new { @class = "form-control", @style = "width: 100%" } })
                                                @Html.ValidationMessageFor(model => model.mediaList[i].MediaCaption, "", new { @class = "validation-text text-danger" })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.mediaList[i].IsPubliclyAccessible, htmlAttributes: new { @class = "control-label col-md-3 label-nopad" })
                                            <div class="col-md-9 col-nopad">
                                                <div class="checkbox" style="padding-left: 0px; padding-bottom: 5px">
                                                    @Html.CheckBoxFor(model => model.mediaList[i].IsPubliclyAccessible, new { id = "tglWarning" + i, type = "checkbox", data_toggle = "toggle", data_on = "Public", data_off = "Private", data_onstyle = "danger", data_offstyle = "success", data_size = "mini", data_style = "ios", data_width = "70", onchange = "toggleWarning()" })

                                                    @*<input id="tglWarning1" type="checkbox" data-toggle="toggle" data-on="Public" data-off="Private" data-onstyle="danger" data-offstyle="success" data-size="mini" data-style="ios" data-width="70" onchange="toggleWarning()">*@
                                                    <label id="lblWarning-@i" class="media-warning-label">warning - visible to public!</label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                <div class="row" style="margin-left: 0px;">
                                    <div class="col-md-12" style="padding-left: 0px; padding-right: 15px">
                                        <div class="form-group" style="margin-bottom: 0px">
                                            @Html.LabelFor(model => model.mediaList[i].MediaDescription, htmlAttributes: new { @class = "control-label col-md-12" })
                                            <div class="col-md-12 col-nopad">
                                                @Html.EditorFor(model => model.mediaList[i].MediaDescription, new { htmlAttributes = new { @class = "form-control", @style = "width: 100%;" } })
                                                @Html.ValidationMessageFor(model => model.mediaList[i].MediaDescription, "", new { @class = "validation-text text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row" style="margin-left: 0px;">
                                    <div class="col-md-12" style="padding-left: 0px; padding-right: 15px">
                                        <div class="form-group">
                                            @Html.Label("Media Item Tags", htmlAttributes: new { @class = "control-label col-md-12", @style = "text-align: left; padding-top: 0px" })
                                            <div class="col-md-12">
                                                @* AUTOTAGGER *@
                                                <input type="hidden" id="key-@Html.Raw(i)" value="@Html.Raw(Model.mediaList[i].MediaID)" />
                                                <input type="text" id="tag-@Html.Raw(i)" />
                                                <input type="hidden" id="hfTag-@Html.Raw(i)" />
                                                @* AUTOTAGGER *@
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            </div>
                        </div>
                    </div>
                <hr class="dp-separator-hr" @*style="display: none"*@ />
                </div>
            }
        </div>
    </div>
}
            
            
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/toggle")
    <script>
        $('#btnSave').click(function () {
            var btnPost = document.getElementById('btnPOST');
            var btnSubmit = document.getElementById('btnSubmit');
            btnPost.click();
            btnSubmit.click();
        });

    </script>
    <script>
        var count = document.getElementById("count").value;

                $(document).ready(function toggleFCLink() {
                    for (var i = 0; i < count; i++) {
                        $("#frmCaseLink_" + i).hide();
                        $("#ddlPurpose_" + i + " option:selected").attr("selected", null);
                        $("#ddlPurpose_" + i + " option[value=2]").attr("selected", "selected");
                        $("#lblWarning-" + i).hide();
                    }
                })

    </script>
    <script type="text/javascript">
                $(function toggleWarning() {
                    $('input[type=checkbox]').change(function () {
                        for (var i = 0; i < count; i++) {
                            if ($('#tglWarning'+i).prop("checked") == true) { $('#lblWarning-'+i).show('slow') } else { $('#lblWarning-'+i).hide() };
                        }
                    });
                })
    </script>
    <script type="text/javascript">

                //var i = 0;
                //for (var i = 0; i < count; i++) {
                //    $("#ddlPurpose_"+i).on("change",{id:i}, function (e) {
                //        if (e.data.id == 0) {
                //            alert("foo")
                //        }
                //    })
                //}
                //for (var i = 1; i <= count; i++) {
                //    var selector = "#ddlPurpose_" + i;
                //    $(selector).on("change", { id: i }, (function (e) {

                //        alert(e.data.id)
                //    }))
                //}
                for (var i = 0; i <= count; i++) {
                    var selector = "#ddlPurpose_" + i;
                    $(selector).on('change', { option: "#ddlPurpose_" + i + " option:selected", target: "#frmCaseLink_" + i  }, function (e) {
                        //alert(e.data.id);
                        if ($(e.data.option).text() == "Case Related")
                        {
                            //alert($(e.data.option).op)
                            $(e.data.target).show();
                        }
                        else $(e.data.target).hide();
                    });
                }


                //    $("#ddlPurpose_" + i).change(function () {
                //        if ($("#ddlPurpose_" + i).find(":selected").val() == "1") {
                //            $("#frmCaseLink_" + i).show("slow")
                //        } else {
                //            $("#frmCaseLink_" + i).hide("slow")
                //        }
                //    })

    </script>

    @* LUKE AUTOTAGSINPUT JS HERE *@

    @Styles.Render("~/tags/css")
    @Scripts.Render("~/bundles/tags")
    <script>
        //OFFICIAL
                var count = document.getElementById("count").value;
                var selected = false;
                for (var y = 0; y < count; y++) {

                    $('#tag-' + y).tagEditor({
                        autocomplete: {
                            autoFocus: true,
                            source: function (request, response) {
                                $.ajax({
                                    url: '/Media/AutoTag/',
                                    data: "{ 'prefix': '" + request.term.replace(/'|\\/gi, '') + "'}",
                                    dataType: "json",
                                    type: "POST",
                                    contentType: "application/json; charset=utf-8",
                                    success: function (data) {
                                        response($.map(data, function (item) {
                                            return item;
                                        }))
                                    },
                                    error: function (response) {
                                        alert(response.responseText);
                                    },
                                    failure: function (response) {
                                        alert(response.responseText);
                                    }
                                });
                            },
                            select: function (e, i) {
                                $('#hfTag-' + y).val(i.item.val);
                                selected = true;
                            },
                            minLength: 1
                        },
                        beforeTagSave: function (field, editor, tags, tag, val) {
                            if (!selected) {
                                return false;
                            }
                            selected = false;
                        },
                        delimiter: "~",
                        forceLowercase: false,
                        placeholder: 'Start Tagging...'

                    });
                }
                //$('#btnSave').click(function () {
                //    document.getElementById("btnPOST").click();

                //});
                $("#btnSubmit").click(function (request) {

                    var all = "";
                    for (var z = 0; z < count; z++) {
                        var mID = document.getElementById("key-"+z).value;
                        var field = $('#tag-' + z).tagEditor('getTags')[0].field;
                        all += mID + ":" + field.value + "|";
                    }
                    all = all.replace(/'/gi, '`')
                    $.ajax({
                        url: '/Media/catchTags/',
                        data: "{ 'tags': '" + all + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            //alert(response.responseText);
                        },
                        failure: function (response) {
                            //alert(response.responseText);
                        }
                    });
                })
        //OFFICIAL

        //DEBUG
                //var count = document.getElementById("count").value;
                //var selected = false;


                //    $('#tag-1').tagEditor({
                //        autocomplete: {
                //            autoFocus: true,
                //            source: function (request, response) {
                //                $.ajax({
                //                    url: '/Media/AutoTag/',
                //                    data: "{ 'prefix': '" + request.term.replace(/'|\\/gi, '') + "'}",
                //                    dataType: "json",
                //                    type: "POST",
                //                    contentType: "application/json; charset=utf-8",
                //                    success: function (data) {
                //                        response($.map(data, function (item) {
                //                            return item;
                //                        }))
                //                    },
                //                    error: function (response) {
                //                        alert(response.responseText);
                //                    },
                //                    failure: function (response) {
                //                        alert(response.responseText);
                //                    }
                //                });
                //            },
                //            select: function (e, i) {
                //                $('#hfTag-1').val(i.item.val);
                //                selected = true;
                //            },
                //            minLength: 1
                //        },
                //        beforeTagSave: function (field, editor, tags, tag, val) {
                //            if (!selected) {
                //                return false;
                //            }
                //            selected = false;
                //        },
                //        delimiter: "~",
                //        forceLowercase: false,
                //        placeholder: 'Start Tagging...'

                //    });

                //$("#btnSubmit").click(function (request) {

                //    var all = "";
                //    for (var z = 0; z < count; z++) {
                //        var field = $('#tag-' + z).tagEditor('getTags')[0].field;
                //        all += "item" + z + ":" + field.value + "|";
                //    }
                //    all = all.replace(/'/gi, '`')
                //    $.ajax({
                //        url: '/Home/catchTags/',
                //        data: "{ 'tags': '" + all + "'}",
                //        dataType: "json",
                //        type: "POST",
                //        contentType: "application/json; charset=utf-8",
                //        success: function (data) {
                //            response($.map(data, function (item) {
                //                return item;
                //            }))
                //        },
                //        error: function (response) {
                //            alert(response.responseText);
                //        },
                //        failure: function (response) {
                //            alert(response.responseText);
                //        }
                //    });
                //})
        //DEBUG
    </script>
    <script>
                $("button").click(function () {
                    this.blur();
                });
    </script>
}